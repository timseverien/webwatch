---
import Flow from '../../components/Flow.svelte';
import SpecificationOverview from '../../components/SpecificationOverview.svelte';
import {
	SpecificationTag,
	getSpecifications,
	SPECIFICATION_TAG_LABEL_MAP,
} from '../../data';
import DefaultLayout from '../../layouts/Default.astro';
import { getPowerSet } from '@ww/core/src/utils/set';
import { deserializeTagList, serializeTagList } from '../../tags';

export function getStaticPaths() {
	const tags: SpecificationTag[] = [
		'Accessibility',
		'Browser',
		'CSS',
		'DOM',
		'ECMA262',
		'ECMA402',
		'HTML',
		'Web API',
	];

	return Array.from(getPowerSet(tags))
		.filter((tags) => tags.length > 0)
		.map((tags) => ({
			params: { tags: serializeTagList(tags) },
		}));
}

const { tags } = Astro.params as {
	tags: string;
};

const tagsParsed = deserializeTagList(tags);
const listFormatter = new Intl.ListFormat('en', {
	type: 'disjunction',
});
---

<DefaultLayout>
	<Flow>
		<h1>
			Specifications tagged {
				listFormatter.format(
					tagsParsed.map((tag) => SPECIFICATION_TAG_LABEL_MAP[tag]),
				)
			}
		</h1>
		<SpecificationOverview
			enabledFilters={['LAST_UPDATED', 'NAME', 'STAGE']}
			specifications={getSpecifications().filter((spec) =>
				tagsParsed.some((tag) =>
					(spec.tags as SpecificationTag[]).includes(tag),
				),
			)}
			client:only
		/>
	</Flow>
</DefaultLayout>
